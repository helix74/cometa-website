---
description: 
globs: 
alwaysApply: true
---
---
description: Guidance sp√©cifique au projet Cometa (automatisme et fermetures).
alwaysApply: true
---

# Guidance Sp√©cifique au Projet Cometa

## Contexte du Projet
- Cometa est un sp√©cialiste tunisien en automatisme, fermetures industrielles et r√©sidentielles, et construction m√©tallique.
- Le site cible √† la fois les professionnels (B2B) et les particuliers (B2C).
- L'objectif principal est d'augmenter de 40% les demandes de devis qualifi√©es.

## Strat√©gie UX
- Segmentation claire B2B/B2C d√®s la page d'accueil.
- Navigation par cat√©gories de produits : Portes & Fermetures, Automatismes & Contr√¥le d'Acc√®s, Am√©nagements Ext√©rieurs, Construction M√©tallique.
- Syst√®me de filtrage et de recherche puissant pour le catalogue produits.
- Formulaires intelligents qui s'adaptent au type de demande.

## Palette de Couleurs
- anthracite: '#1A202C'
- acier-clair: '#E2E8F0'
- bleu-technique: '#3182CE'
- orange-securite: '#0859a8' (Nouveau bleu client - remplace l'ancien orange #F6AD55)

## Ton et Style
- Professionnel mais accessible.
- Technique sans √™tre intimidant.
- Mise en avant de l'expertise et de la fiabilit√©.

## üöÄ Technologies & Standards

### Stack Technique
- **Next.js 15** avec App Router (√† utiliser si disponible, sinon Next.js 14).
- **TypeScript** obligatoire.
- **Tailwind CSS** pour le styling.
- **clsx + tailwind-merge** pour les classes conditionnelles (√† installer si non pr√©sent).
- **framer-motion** pour les animations (√† installer si non pr√©sent).
- **lucide-react** pour les ic√¥nes (√† installer si non pr√©sent).

### Performance & SEO
- **Mobile-first** design obligatoire.
- **Core Web Vitals** optimis√©s (LCP, FID, CLS).
- **SEO** complet : Utiliser les `metadata` de Next.js pour `title`, `description`, `keywords`, `openGraph`, `twitter` pour chaque page.
- **Accessibilit√© (A11y)** respect√©e : Utiliser les attributs ARIA, assurer la navigation clavier, contraste suffisant, focus visible, `alt text` pour les images.
- **Optimisations obligatoires :** Lazy loading des images (`next/image`), code splitting automatique, minification des assets, compression des images, cache appropri√©.

## üé≠ Animations & Interactions

### Animations disponibles (classes Tailwind personnalis√©es ou Framer Motion)
- `animate-slide-down` : Pour les √©l√©ments qui apparaissent du haut (ex: Header au chargement).
- `animate-fade-in` : Pour les √©l√©ments qui apparaissent progressivement (ex: √©l√©ments au scroll).
- `animate-fade-in-up` : Pour les √©l√©ments qui apparaissent du bas avec un fondu (ex: Footer au scroll, sections de page).

### Transitions
- **Dur√©e par d√©faut :** 200ms pour les interactions (hover, click), 300ms pour les animations d'entr√©e/sortie.
- **Easing :** `ease-out` pour les entr√©es, `ease-in-out` pour les hover et les animations plus fluides.

## üì± Responsive Design

### Breakpoints Tailwind (standards)
- `sm:` (640px+)
- `md:` (768px+)
- `lg:` (1024px+)
- `xl:` (1280px+)

### Approche
- Commencer toujours par le design et le code pour mobile.
- Ajouter les styles desktop en utilisant les modificateurs de breakpoints.
- Tester sur une vari√©t√© d'appareils et de tailles d'√©cran.

## üìù Documentation & Workflow

### Commentaires
- **JSDoc** pour les fonctions complexes et les composants r√©utilisables.
- **Commentaires clairs** pour la logique m√©tier complexe.

### Git
- **Commits** descriptifs et atomiques en fran√ßais.
- **Branches :** Utiliser une convention claire (ex: `feature/nom-fonctionnalite`, `bugfix/description-bug`).
- **Pull requests :** Inclure une description compl√®te des changements et des tests effectu√©s.

## üß™ Testing

### Tests recommand√©s
- **Tests unitaires :** Pour les fonctions utilitaires et la logique m√©tier isol√©e.
- **Tests d'int√©gration :** Pour les formulaires, les interactions complexes et les flux utilisateur critiques.
- **Tests E2E (End-to-End) :** Pour les parcours utilisateur critiques (ex: demande de devis, soumission de formulaire de contact).

## üîß Configuration

### Fichiers de configuration cl√©s
- `tailwind.config.ts` : Pour les couleurs personnalis√©es, les animations et les th√®mes.
- `next.config.ts` : Pour les optimisations sp√©cifiques √† Next.js (ex: images, redirections).
- `tsconfig.json` : Pour une configuration TypeScript stricte et coh√©rente.

## üîß D√©pannage Tailwind CSS

Si les classes Tailwind ne s'appliquent pas :
1. V√©rifiez que `tailwind.config.ts` inclut tous les dossiers de composants dans `content`.
2. V√©rifiez que `postcss.config.js` existe et contient les plugins `tailwindcss` et `autoprefixer`.
3. V√©rifiez que `src/app/globals.css` contient les directives `@tailwind`.
4. V√©rifiez que `globals.css` est import√© dans `src/app/layout.tsx`.
5. Red√©marrez le serveur de d√©veloppement (`npm run dev`).
6. Supprimez le dossier `.next/` et relancez le serveur si n√©cessaire.

